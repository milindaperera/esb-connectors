<template name="createRepository" xmlns="http://ws.apache.org/ns/synapse">

  <parameter name="repoSlug" description="Identifier of the repository."/>
  <parameter name="scm" description="The SCM type for the new repo. Either 'hg' or 'git'."/>
  <parameter name="name" description="The name for the repository. When omitted, this assumes that value of the repo_slug part of the URL."/>
  <parameter name="isPrivate" description="Whether the repository should be public (false) or private (true)"/>
  <parameter name="description" description="The human readable description of the repository (optional)."/>
  <parameter name="forkingPolicy" description="Control the rules for forking this repository. Available values are: allow_forks, no_public_forks, no_forks"/>
  <parameter name="language" description="The programming language used in the repository."/>
  <parameter name="hasIssues" description="Whether the repository should have an issue tracker (optional – defaults to false)."/>
  <parameter name="hasWiki" description="Whether the repository should have a wiki (optional – defaults to false)."/>
  
  <sequence>
  
  	<property name="uri.var.isPrivate" expression="$func:isPrivate"/>  	
  	<property name="uri.var.hasIssues" expression="$func:hasIssues"/>  	
  	<property name="uri.var.hasWiki" expression="$func:hasWiki"/>  	
    <property name="uri.var.repoSlug" expression="$func:repoSlug"/>
    <property name="uri.var.scm" expression="$func:scm"/>
    <property name="uri.var.name" expression="$func:name"/>
    <property name="uri.var.description" expression="$func:description"/>
    <property name="uri.var.forkingPolicy" expression="$func:forkingPolicy"/>
    <property name="uri.var.language" expression="$func:language"/>
    
    <payloadFactory media-type="json">
      <format>
        {}
      </format>
    </payloadFactory>
    
    <script language="js">
    	<![CDATA[
    		var scm = mc.getProperty('uri.var.scm');
    		var name = mc.getProperty('uri.var.name');    		
    		var isPrivate = mc.getProperty('uri.var.isPrivate');
    		var description = mc.getProperty('uri.var.description');
    		var forkingPolicy = mc.getProperty('uri.var.forkingPolicy');
    		var language = mc.getProperty('uri.var.language');
    		var hasIssues = mc.getProperty('uri.var.hasIssues');
    		var hasWiki = mc.getProperty('uri.var.hasWiki');
    		
    		payload = mc.getPayloadJSON();
			
			if(scm != null && scm != ""){
				payload.scm = scm;
			}
			
			if(name != null && name != ""){
				payload.name = name;
			}
			
			if(isPrivate != null && isPrivate != ""){
				payload.is_private = isPrivate;
			}
			
			if(description != null && description != ""){
				payload.description = description;
			}	
						
			if(forkingPolicy != null && forkingPolicy != ""){
				payload.fork_policy = forkingPolicy;
			}
			
			if(language != null && language != ""){
				payload.language = language;
			}
			
			if(hasIssues != null && hasIssues != ""){
				payload.has_issues = hasIssues;
			}
			
			if(hasWiki != null && hasWiki != ""){
				payload.has_wiki = hasWiki;
			}
			
			mc.setPayloadJSON(payload);
    	]]>    	
    </script>
    	
    <call>
      <endpoint>
        <http method="post" uri-template="{uri.var.apiUrl}/{uri.var.repoSlug}"/>
      </endpoint>
    </call>
    
	<!-- Remove response custom header information -->
    <header name="X-Frame-Options" scope="transport" action="remove" />		
	<header name="Strict-Transport-Security" scope="transport" action="remove" />	
	<header name="X-Render-Time" scope="transport" action="remove" />		
	<header name="Vary" scope="transport" action="remove" />		
	<header name="X-Served-By" scope="transport" action="remove" />		
	<header name="X-Version" scope="transport" action="remove" />	
	<header name="X-Static-Version" scope="transport" action="remove" />
	<header name="X-Request-Count" scope="transport" action="remove" />	
	<header name="X-Content-Type-Options" scope="transport" action="remove" />	
	<header name="WWW-Authenticate" scope="transport" action="remove" />	
	<header name="Location" scope="transport" action="remove" />
		
  </sequence>
</template>