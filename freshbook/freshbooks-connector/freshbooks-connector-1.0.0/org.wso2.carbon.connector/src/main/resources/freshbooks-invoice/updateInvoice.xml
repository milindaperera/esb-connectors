<template name="updateInvoice" xmlns="http://ws.apache.org/ns/synapse">
	<parameter name="invoiceId" description="The ID of an invoice." />
	<parameter name="clientId" description="The client Id of the invoice." />
	<parameter name="firstName" description="The first name to be appeared on the invoice." />
	<parameter name="lastName" description="The last name to be appeared on the invoice." />
	<parameter name="poNumber" description="The purchase order number." />
	<parameter name="discount" description="The percent discount amount." />
	<parameter name="notes" description="The additional notes." />
	<parameter name="terms" description="The terms of the invoice." />
	<parameter name="returnUri" description="The return URI of the invoice." />
	<parameter name="organization" description="The name of the organization." />
	<parameter name="pStreet1" description="The first street address line." />
	<parameter name="pStreet2" description="The second street address line." />
	<parameter name="pCity" description="The city part of the address." />
	<parameter name="pState" description="The state of the address." />
	<parameter name="pCountry" description="The country of the invoice." />
	<parameter name="pCode" description="The code of the invoice address." />
	<parameter name="vatName" description="The VAT name." />
	<parameter name="vatNumber" description="The VAT number." />
	<parameter name="contacts" description="The details of the contacts." />
	<parameter name="lines" description="This specifies one or more line elements." />
	<parameter name="gateways" description="This specifies one or more gateways." />
	<parameter name="number" description="The number to be displayed in the invoice." />
	<parameter name="status" description="The status of the invoice." />
	<parameter name="date" description="The invoice date." />
	<parameter name="currencyCode" description="The currency code." />
	<parameter name="language" description="The language code." />
	<parameter name="estimateId" description="The estimate ID." />

	<sequence>
		<property name="uri.var.invoiceId" expression="$func:invoiceId" />
		<property name="uri.var.clientId" expression="$func:clientId" />
		<property name="uri.var.firstName" expression="$func:firstName" />
		<property name="uri.var.lastName" expression="$func:lastName" />
		<property name="uri.var.poNumber" expression="$func:poNumber" />
		<property name="uri.var.discount" expression="$func:discount" />
		<property name="uri.var.notes" expression="$func:notes" />
		<property name="uri.var.terms" expression="$func:terms" />
		<property name="uri.var.returnUri" expression="$func:returnUri" />
		<property name="uri.var.organization" expression="$func:organization" />
		<property name="uri.var.pStreet1" expression="$func:pStreet1" />
		<property name="uri.var.pStreet2" expression="$func:pStreet2" />
		<property name="uri.var.pCity" expression="$func:pCity" />
		<property name="uri.var.pState" expression="$func:pState" />
		<property name="uri.var.pCountry" expression="$func:pCountry" />
		<property name="uri.var.pCode" expression="$func:pCode" />
		<property name="uri.var.vatName" expression="$func:vatName" />
		<property name="uri.var.vatNumber" expression="$func:vatNumber" />
		<property name="uri.var.contacts" expression="$func:contacts" />
		<property name="uri.var.lines" expression="$func:lines" />
		<property name="uri.var.gateways" expression="$func:gateways" />
		<property name="uri.var.number" expression="$func:number" />
		<property name="uri.var.status" expression="$func:status" />
		<property name="uri.var.date" expression="$func:date" />
		<property name="uri.var.currencyCode" expression="$func:currencyCode" />
		<property name="uri.var.language" expression="$func:language" />
		<property name="uri.var.estimateId" expression="$func:estimateId" />

		<payloadFactory media-type="xml">
			<format>
				<request method="invoice.update" xmlns="">
					<invoice>
						<invoice_id>$1</invoice_id>
					</invoice>
				</request>
			</format>
			<args>
				<arg expression="get-property('uri.var.invoiceId')" />
			</args>
		</payloadFactory>

		<script language="js">
			<![CDATA[
			
				//request body param variables
		        var firstName = mc.getProperty('uri.var.firstName');
				var lastName = mc.getProperty('uri.var.lastName');
				var poNumber = mc.getProperty('uri.var.poNumber');
				var discount = mc.getProperty('uri.var.discount');
				var notes = mc.getProperty('uri.var.notes');
				var terms = mc.getProperty('uri.var.terms');
				var returnUri = mc.getProperty('uri.var.returnUri');
				var organization = mc.getProperty('uri.var.organization');
				var pStreet1 = mc.getProperty('uri.var.pStreet1');
				var pStreet2 = mc.getProperty('uri.var.pStreet2');
				var pCity = mc.getProperty('uri.var.pCity');
				var pState = mc.getProperty('uri.var.pState');
				var pCountry = mc.getProperty('uri.var.pCountry');
				var pCode = mc.getProperty('uri.var.pCode');
				var vatName = mc.getProperty('uri.var.vatName');
		        var vatNumber = mc.getProperty('uri.var.vatNumber');
		        var number = mc.getProperty('uri.var.number');
		        var status = mc.getProperty('uri.var.status');
		        var date = mc.getProperty('uri.var.date');
		        var currencyCode = mc.getProperty('uri.var.currencyCode');
		        var language = mc.getProperty('uri.var.language');
		        var estimateId = mc.getProperty('uri.var.estimateId');
		        var clientId = mc.getProperty('uri.var.clientId');
		        var lines = mc.getProperty('uri.var.lines');
		        var contacts = mc.getProperty('uri.var.contacts');
		        var gateways = mc.getProperty('uri.var.gateways');
		        
				var payload = mc.getPayloadXML();
				
				if (firstName != null && firstName != "") {
					payload.invoice.first_name = firstName;
				}
				
				if (lastName != null && lastName != "") {
					payload.invoice.last_name = lastName;
				}
				
				if (poNumber != null && poNumber != "") {
					payload.invoice.po_number = poNumber;
				}
				
				if (discount != null && discount != "") {
					payload.invoice.discount = discount;
				}
				
				if (notes != null && notes != "") {
					payload.invoice.notes = notes;
				}
				
				if (terms != null && terms != "") {
					payload.invoice.terms = terms;
				}
				
				if (returnUri != null && returnUri != "") {
					payload.invoice.return_uri = returnUri;
				}
				
				if (organization != null && organization != "") {
					payload.invoice.organization = organization;
				}
				
				if (pStreet1 != null && pStreet1 != "") {
					payload.invoice.p_street1 = pStreet1;
				}
				
				if (pStreet2 != null && pStreet2 != "") {
					payload.invoice.p_street2 = pStreet2;
				}
				
				if (pCity != null && pCity != "") {
					payload.invoice.p_city = pCity;
				}
				
				if (pState != null && pState != "") {
					payload.invoice.p_state = pState;
				}
				
				if (pCountry != null && pCountry != "") {
					payload.invoice.p_country = pCountry;
				}
				
				if (pCode != null && pCode != "") {
					payload.invoice.p_code = pCode;
				}
				
				if (vatName != null && vatName != "") {
					payload.invoice.vat_name = vatName;
				}
				
				if (vatNumber != null && vatNumber != "") {
					payload.invoice.vat_number = vatNumber;
				}
				
				if (number != null && number != "") {
					payload.invoice.number = number;
				}
				
				if (status != null && status != "") {
					payload.invoice.status = status;
				}
				
				if (date != null && date != "") {
					payload.invoice.date = date;
				}
				
				if (currencyCode != null && currencyCode != "") {
					payload.invoice.currency_code = currencyCode;
				}
				
				if (language != null && language != "") {
					payload.invoice.language = language;
				}
				
				if (estimateId != null && estimateId != "") {
					payload.invoice.estimate_id = estimateId;
				}
				
				if (clientId != null && clientId != "") {
					payload.invoice.client_id = clientId;
				}
				
				if (lines != null && lines != "") {
					var linesXml = new XML('<lines>' + lines + '</lines>');
					payload.invoice.lines = linesXml;
				}
				
				if (contacts != null && contacts != "") {
					var contactsXml = new XML('<contacts>' + contacts + '</contacts>');
					payload.invoice.contacts = contactsXml;
				}
				
				if (gateways != null && gateways != "") {
					var gatewaysXml = new XML('<gateways>' + gateways + '</gateways>');
					payload.invoice.gateways = gatewaysXml;
				}
								
				mc.setPayloadXML(payload);
				
			]]>
		</script>

		<call>
			<endpoint>
				<http method="post" uri-template="{uri.var.apiUrl}/api/2.1/xml-in" />
			</endpoint>
		</call>

		<!-- Remove custom header information in response -->
		<header name="X-Frame-Options" scope="transport" action="remove" />
		<header name="Strict-Transport-Security" scope="transport" action="remove" />
		<header name="WWW-Authenticate" scope="transport" action="remove" />

	</sequence>
</template>