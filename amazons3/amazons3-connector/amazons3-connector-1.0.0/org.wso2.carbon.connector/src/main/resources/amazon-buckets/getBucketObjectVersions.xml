<template name="getBucketObjectVersions" xmlns="http://ws.apache.org/ns/synapse">

	<parameter name="bucketUrl" description="End point URL of the request." />
	<parameter name="delimiter" description="Character that specify to group keys" />
	<parameter name="encodingType" description="Requests Amazon S3 to encode the response and specifies the encoding method to use" />
	<parameter name="keyMarker" description="Specifies the key in the bucket that you want to start listing from" />
	<parameter name="maxKeys" description="Sets the maximum number of keys returned in the response body" />
	<parameter name="prefix" description="Parameter to select only those keys that begin with the specified prefix" />
	<parameter name="versionIdMarker" description="Specifies the object version you want to start listing from" />

	<sequence>
		<property name="uri.var.bucketUrl" expression="$func:bucketUrl" />
		<property name="uri.var.delimiter" expression="$func:delimiter" />
		<property name="uri.var.encodingType" expression="$func:encodingType" />
		<property name="uri.var.keyMarker" expression="$func:keyMarker" />
		<property name="uri.var.maxKeys" expression="$func:maxKeys" />
		<property name="uri.var.prefix" expression="$func:prefix" />
		<property name="uri.var.versionIdMarker" expression="$func:versionIdMarker" />
		<property name="uri.var.query" value="" />
		<property name="uri.var.uriRemainder" value="/?versions" />

		<!-- Authentication Header Setup -->
		<class name="org.wso2.carbon.connector.amazons3.auth.AmazonS3AuthConnector" />

		<!-- Properties assigned in AmazonS3AuthConnector -->
		<filter xpath="(string(get-property('date'))) and get-property('date') != ''">  
			<then>
				<property name="Date" expression="get-property('date')" scope="transport" type="STRING" />
			</then>
		</filter> 
		
		<filter xpath="(string(get-property('isXAmzDateValue'))) and get-property('isXAmzDateValue') != ''">   
			<then>
				<property name="x-amz-date" expression="get-property('isXAmzDateValue')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('authenticationCode'))) and get-property('authenticationCode') != ''">    
			<then>
				<property name="Authorization" expression="get-property('authenticationCode')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.delimiter'))) and get-property('uri.var.delimiter') != ''">    
			<then>
				<property name="uri.var.query" expression="fn:concat(get-property('uri.var.query'),'&amp;delimiter=', get-property('uri.var.delimiter'))" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.encodingType'))) and get-property('uri.var.encodingType') != ''">    
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;encoding-type=', get-property('uri.var.encodingType'))" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.keyMarker'))) and get-property('uri.var.keyMarker') != ''">  
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;key-marker=', get-property('uri.var.keyMarker'))" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.maxKeys'))) and get-property('uri.var.maxKeys') != ''">     
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;max-keys=', get-property('uri.var.maxKeys'))" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.prefix'))) and get-property('uri.var.prefix') != ''">   
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;prefix=', get-property('uri.var.prefix'))" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.versionIdMarker'))) and get-property('uri.var.versionIdMarker') != ''">     
			<then>
				<property name="uri.var.query"
					expression="fn:concat(get-property('uri.var.query'),'&amp;version-id-marker=', get-property('uri.var.versionIdMarker'))" />
			</then>
		</filter>

		<call>
			<endpoint>
				<http method="get" uri-template="{uri.var.bucketUrl}{uri.var.uriRemainder}{uri.var.query}"/>
			</endpoint>
		</call>

		<!-- Remove response custom header information -->
		<header name="x-amz-id-2" scope="transport" action="remove" />
		<header name="x-amz-request-id" scope="transport" action="remove" />
		<header name="Via" scope="transport" action="remove" />

	</sequence>
</template>