<template name="init" xmlns="http://ws.apache.org/ns/synapse">

	<parameter name="accessKeyId" description="AWS access key ID." />
	<parameter name="secretAccessKey" description="AWS secret access key." />
	<parameter name="methodType" description="Type of the HTTP method." />
	<parameter name="contentLength" description="Length of the message without the headers according to RFC 2616." />
	<parameter name="contentType" description="The content type of the resource in case the request content in the body." />
	<parameter name="contentMD5" description="Base64 encoded 128-bit MD5 digest of the message without the headers according to RFC 1864." />
	<parameter name="expect" description="This header can be used only if a body is sent to not to send the request body until it recieves an acknowledgment." />
	<parameter name="host" description="For path-style requests, the value is s3.amazonaws.com. For virtual-style requests, the value is BucketName.s3.amazonaws.com." />
	<parameter name="isXAmzDate" description="The current date and time according to the requester." />
	<parameter name="xAmzSecurityToken" description="The security token based on whether using Amazon DevPay operations or temporary security credentials." />
	<parameter name="bucketName" description="Name of the bucket require." />
	
	<parameter name="xAmzAcl" description="Sets the ACL of the bucket using the specified canned ACL." />
	<parameter name="xAmzGrantRead" description="Allows the specified grantee or grantees to list the objects in the bucket." />
	<parameter name="xAmzGrantWrite" description="Allows the specified grantee or grantees to create, overwrite, and delete any object in the bucket." />
	<parameter name="xAmzGrantReadAcp" description="Allows the specified grantee or grantees to read the bucket ACL." />
	<parameter name="xAmzGrantWriteAcp" description="Allows the specified grantee or grantees to write the ACL for the applicable bucket." />
	<parameter name="xAmzGrantFullControl" description="Allows the specified grantee or grantees the READ, WRITE, READ_ACP, and WRITE_ACP permissions on the bucket." />
	<parameter name="xAmzMeta" description="Field names prefixed with x-amz-meta- contain user-specified metadata." />
	<parameter name="xAmzServeEncryption" description="Specifies server-side encryption algorithm to use when Amazon S3 creates an object." />
	<parameter name="xAmzStorageClass" description="Storage class to use for storing the object." />
	<parameter name="xAmzWebsiteLocation" description="Amazon S3 stores the value of this header in the object metadata." />
	<parameter name="xAmzMfa" description="The value is the concatenation of the authentication device's serial number, a space, and the value that is displayed on your authentication device." />

	<parameter name="xAmzCopySource" description="The name of the source bucket and key name of the source object, separated by a slash." />
	<parameter name="xAmzMetadataDirective" description="Specifies whether the metadata is copied from the source object or replaced with metadata provided in the request." />
	<parameter name="xAmzCopySourceIfMatch" description="Copies the object if its entity tag (ETag) matches the specified tag." />
	<parameter name="xAmzCopySourceIfNoneMatch" description="Copies the object if its entity tag (ETag) is different than the specified ETag." />
	<parameter name="xAmzCopySourceIfUnmodifiedSince" description="Copies the object if it hasn't been modified since the specified time." />
	<parameter name="xAmzCopySourceIfModifiedSince" description="Copies the object if it has been modified since the specified time." />
	<parameter name="xAmzServerSideEncryption" description="Specifies the server-side encryption algorithm to use when Amazon S3 creates the target object." />

	<sequence>
		<property name="uri.var.accessKeyId" expression="$func:accessKeyId" />
		<property name="uri.var.secretAccessKey" expression="$func:secretAccessKey" />
		<property name="uri.var.methodType" expression="$func:methodType" />
		<property name="uri.var.contentLength" expression="$func:contentLength" />
		<property name="uri.var.contentType" expression="$func:contentType" />
		<property name="uri.var.contentMD5" expression="$func:contentMD5" />
		<property name="uri.var.expect" expression="$func:expect" />
		<property name="uri.var.host" expression="$func:host" />
		<property name="uri.var.isXAmzDate" expression="$func:isXAmzDate" />
		<property name="uri.var.xAmzSecurityToken" expression="$func:xAmzSecurityToken" />
		<property name="uri.var.bucketName" expression="$func:bucketName" />

		<property name="uri.var.xAmzAcl" expression="$func:xAmzAcl" />
		<property name="uri.var.xAmzGrantRead" expression="$func:xAmzGrantRead" />
		<property name="uri.var.xAmzGrantWrite" expression="$func:xAmzGrantWrite" />
		<property name="uri.var.xAmzGrantReadAcp" expression="$func:xAmzGrantReadAcp" />
		<property name="uri.var.xAmzGrantWriteAcp" expression="$func:xAmzGrantWriteAcp" />
		<property name="uri.var.xAmzGrantFullControl" expression="$func:xAmzGrantFullControl" />

		<property name="uri.var.xAmzMeta" expression="$func:xAmzMeta" />
		<property name="uri.var.xAmzServeEncryption" expression="$func:xAmzServeEncryption" />
		<property name="uri.var.xAmzStorageClass" expression="$func:xAmzStorageClass" />
		<property name="uri.var.xAmzWebsiteLocation" expression="$func:xAmzWebsiteLocation" />
		<property name="uri.var.xAmzMfa" expression="$func:xAmzMfa" />

		<property name="uri.var.xAmzCopySource" expression="$func:xAmzCopySource" />
		<property name="uri.var.xAmzMetadataDirective" expression="$func:xAmzMetadataDirective" />
		<property name="uri.var.xAmzCopySourceIfMatch" expression="$func:xAmzCopySourceIfMatch" />
		<property name="uri.var.xAmzCopySourceIfNoneMatch" expression="$func:xAmzCopySourceIfNoneMatch" />
		<property name="uri.var.xAmzCopySourceIfUnmodifiedSince" expression="$func:xAmzCopySourceIfUnmodifiedSince" />
		<property name="uri.var.xAmzCopySourceIfModifiedSince" expression="$func:xAmzCopySourceIfModifiedSince" />

		<!-- InitAclHeaders Setup -->

	    <filter xpath="(string(get-property('uri.var.xAmzAcl'))) or get-property('uri.var.xAmzAcl') != ''">   
			<then>
				<property name="x-amz-acl" expression="get-property('uri.var.xAmzAcl')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzGrantRead'))) or get-property('uri.var.xAmzGrantRead') != ''"> 
			<then>
				<property name="x-amz-grant-read" expression="get-property('uri.var.xAmzGrantRead')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzGrantWrite'))) or get-property('uri.var.xAmzGrantWrite') != ''">  
			<then>
				<property name="x-amz-grant-write" expression="get-property('uri.var.xAmzGrantWrite')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzGrantReadAcp'))) or get-property('uri.var.xAmzGrantReadAcp') != ''">  
			<then>
				<property name="x-amz-grant-read-acp" expression="get-property('uri.var.xAmzGrantReadAcp')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzGrantWriteAcp'))) or get-property('uri.var.xAmzGrantWriteAcp') != ''">  
			<then>
				<property name="x-amz-grant-write-acp" expression="get-property('uri.var.xAmzGrantWriteAcp')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzGrantFullControl'))) or get-property('uri.var.xAmzGrantFullControl') != ''">  
			<then>
				<property name="x-amz-grant-full-control" expression="get-property('uri.var.xAmzGrantFullControl')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<!-- InitCommonHeaders Setup -->

		<filter xpath="(string(get-property('uri.var.contentLength'))) or get-property('uri.var.contentLength') != ''">  
			<then>
				<property name="Content-Length" expression="get-property('uri.var.contentLength')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.contentType'))) or get-property('uri.var.contentType') != ''">  
			<then>
				<property name="Content-Type" expression="get-property('uri.var.contentType')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.contentMD5'))) or get-property('uri.var.contentMD5') != ''">  
			<then>
				<property name="Content-MD5" expression="get-property('uri.var.contentMD5')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.expect'))) or get-property('uri.var.expect') != ''">  
			<then>
				<property name="Expect" expression="get-property('uri.var.expect')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.host'))) or get-property('uri.var.host') != ''">  
			<then>
				<property name="Host" expression="get-property('uri.var.host')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzSecurityToken'))) or get-property('uri.var.xAmzSecurityToken') != ''">  
			<then>
				<property name="x-amz-security-token" expression="get-property('uri.var.xAmzSecurityToken')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<!-- InitPutObjectHeaders Setup -->
		<filter xpath="(string(get-property('uri.var.cacheControl'))) or get-property('uri.var.cacheControl') != ''">  
			<then>
				<property name="Cache-Control" expression="get-property('uri.var.cacheControl')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.contentDisposition'))) or get-property('uri.var.contentDisposition') != ''">  
			<then>
				<property name="Content-Disposition" expression="get-property('uri.var.contentDisposition')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.contentEncoding'))) or get-property('uri.var.contentEncoding') != ''">  
			<then>
				<property name="Content-Encoding" expression="get-property('uri.var.contentEncoding')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.expires'))) or get-property('uri.var.expires') != ''">  
			<then>
				<property name="Expires" expression="get-property('uri.var.expires')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzMeta'))) or get-property('uri.var.xAmzMeta') != ''">  
			<then> 
				<property name="x-amz-meta-" expression="get-property('uri.var.xAmzMeta')" scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzServeEncryption'))) or get-property('uri.var.xAmzServeEncryption') != ''">  
			<then> 
				<property name="x-amz-server-side-encryption" expression="get-property('uri.var.xAmzServeEncryption')"
					scope="transport" type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzStorageClass'))) or get-property('uri.var.xAmzStorageClass') != ''">  
			<then> 
				<property name="x-amz-storage-class" expression="get-property('uri.var.xAmzStorageClass')" scope="transport"
					type="STRING" />
			</then>
		</filter>

		<filter xpath="(string(get-property('uri.var.xAmzWebsiteLocation'))) or get-property('uri.var.xAmzWebsiteLocation') != ''">
			<then>
				<property name="x-amz-website-redirect-location" expression="get-property('uri.var.xAmzWebsiteLocation')"
					scope="transport" type="STRING" />
			</then>
		</filter>
	</sequence>
</template>