<template name="getRecords" xmlns="http://ws.apache.org/ns/synapse">

	<parameter name="newFormat" description="The newFormat, an integer determine weather null valus should be excluded(1) or included(2)" />
	<parameter name="version" description="The version, determines the API version" />
	<parameter name="selectColumns" description="The selectColumns, specifies which modules to be retrieved" />
	<parameter name="fromIndex" description="Index number to retrieve records from, default is 1" />
	<parameter name="toIndex" description="Index number to retrieve records to, default is 20" />
	<parameter name="sortColumnString" description="Specifies the sorting order according to column names, defaults to ascending order" />
	<parameter name="sortOrderString" description="Specifies the sorting order, defaults to asc" />
	<parameter name="lastModifiedTime" description="Specifies the datetime, where  modified data will be fetched after the configured time" />
	<parameter name="moduleType" description="The module to fetch records from" />
	<sequence>

		<property name="uri.var.newFormat" expression="$func:newFormat" />
		<property name="uri.var.version" expression="$func:version" />
		<property name="uri.var.selectColumns" expression="$func:selectColumns" />
		<property name="uri.var.fromIndex" expression="$func:fromIndex" />
		<property name="uri.var.toIndex" expression="$func:toIndex" />
		<property name="uri.var.sortColumnString" expression="$func:sortColumnString" />
		<property name="uri.var.sortOrderString" expression="$func:sortOrderString" />
		<property name="uri.var.lastModifiedTime" expression="$func:lastModifiedTime" />
		<property name="uri.var.moduleType" expression="$func:moduleType" />


		<script language="js">
			<![CDATA[ 
			
				// Generate url with parameters
				var newFormat = mc.getProperty('uri.var.newFormat');
				var version = mc.getProperty('uri.var.version');
				var selectColumns = mc.getProperty('uri.var.selectColumns');
				var fromIndex = mc.getProperty('uri.var.fromIndex');
				var toIndex = mc.getProperty('uri.var.toIndex');				
				var sortColumnString = mc.getProperty('uri.var.sortColumnString');
				var sortOrderString = mc.getProperty('uri.var.sortOrderString');
				var lastModifiedTime = mc.getProperty('uri.var.lastModifiedTime');				
				var urlQuery = mc.getProperty('uri.var.urlQuery');
				var moduleType = mc.getProperty('uri.var.moduleType');
				
				// Append query parameters
				
				if(newFormat != null && newFormat != "") {
					urlQuery += 'newFormat=' + newFormat + '&';
				}
				
				if(version != null && version != "") {
					urlQuery += 'version=' + version + '&';
				}
				
				if(selectColumns != null && selectColumns != "") {
					urlQuery += 'selectColumns=' + encodeURIComponent(selectColumns) + '&';
				}
				
				if(fromIndex != null && fromIndex != "") {
					urlQuery += 'fromIndex=' + fromIndex + '&';
				}
				
				if(toIndex != null && toIndex != "") {
					urlQuery += 'toIndex=' + toIndex + '&';
				}
				
				if(sortColumnString != null && sortColumnString != "") {
					urlQuery += 'sortColumnString=' + encodeURIComponent(sortColumnString) + '&';
				}
				
				if(sortOrderString != null && sortOrderString != "") {
					urlQuery += 'sortOrderString=' + encodeURIComponent(sortOrderString) + '&';
				}
				
				if(lastModifiedTime != null && lastModifiedTime != "") {
					urlQuery += 'lastModifiedTime=' + encodeURIComponent(lastModifiedTime) + '&';
				}
						
				urlQuery = '/' + encodeURIComponent(moduleType) + '/getRecords?' + urlQuery.substring(0, (''+urlQuery).length-1);
				mc.setProperty('uri.var.urlQuery', urlQuery);
							
			]]></script>

		<call>
			<endpoint>
				<http method="get" uri-template="{uri.var.apiUrl}/crm/private/json{uri.var.urlQuery}" />
			</endpoint>
		</call>

		<!-- Removing custom headers -->
		<header name="Strict-Transport-Security" action="remove" scope="transport" />
		<header name="X-XSS-Protection" action="remove" scope="transport" />
		<header name="X-Download-Options" action="remove" scope="transport" />
		<header name="X-Content-Type-Options" action="remove" scope="transport" />
		<header name="Pragma" action="remove" scope="transport" />
		<header name="Cache-Control" action="remove" scope="transport" />
	</sequence>
</template>